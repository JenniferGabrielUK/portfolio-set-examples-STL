        //Set - Fast container retreival using a key
#include <iostream>
#include <set>
#include <map>
#include <iomanip>
#include <string>

class Person {
    friend std::ostream& operator<< (std::ostream& os, const Person& p);
    std::string name{};
    int age;
public:
    Person() : name{ "unknown" }, age{ 0 } {};
    Person(std::string name, int age) : name{ name }, age{ age } {};
    ~Person() = default;
    bool operator<(const Person& p) const { return this->age < p.age; }           // Overloaded <less than operator to use class with the STL
    bool operator==(const Person& p) const { return this->age == p.age; }         // Overloaded ==equality operator to use class with the STL
    void set_name(std::string n) { name = n; }
    std::string get_name() { return name; }
    void set_age(int a) { age = a; }
    int get_age() { return age; }
 
};

std::ostream& operator<< (std::ostream& os, const Person& p) { 
    os << p.name << ", " << p.age; return os; 
}

template <typename T> 
void display(const std::set<T>& s) {
    std::cout << "[ "; 
        for (const auto& elem : s) {
            std::cout << elem << " ";
        }
    std::cout << " ]" << std::endl;
}


void test1() {
    std::cout << "\n======Test 1=====" << std::endl;
    std::set<int> s1{ 1,2,3,4,5 };
    display(s1);
    s1 = { 1,2,3,1,1,2,2,3,3,4,5 }; //will remove duplicates
    s1.insert(0);
    s1.insert(10);
    display(s1);
    if (s1.count(10))
        std::cout << "10 is in the set" << std::endl;
    else
        std::cout << "10 is NOT in the set" << std::endl;
    auto it = s1.find(5);
    if (it != s1.end())
        std::cout << "Found: " << *it << std::endl;
    s1.clear();
    display(s1);
}

void test2() {
    std::cout << "=====Test 2=====" << std::endl;
    std::set<Person> stooges{
        {"Larry", 1},
        {"Moe", 2},
        {"Curly", 3}
    };
    display(stooges);
    stooges.emplace("James", 50);
    display(stooges);
    stooges.emplace("Frank", 50);
    display(stooges);
    auto it = stooges.find(Person{ "Moe", 2 });
    if (it != stooges.end())
        stooges.erase(it);
    display(stooges);
    it = stooges.find(Person{ "xxxxx", 50 }); //will remove James obj
                                              //uses <less operator overloaded
    if (it != stooges.end())
        stooges.erase(it);
    display(stooges);
}

void test3() {
    std::cout << "=====Test 3=====" << std::endl;
    std::set<std::string> s{ "A","B","C" };
    display(s);
    auto result = s.insert("D"); //creates a astd::pair with terator pointing to D and second part a boolean
    display(s);
    std::cout << std::boolalpha;
    std::cout << "First pair of the iterator: " << *(result.first) << std::endl;
    std::cout << "Second pair of the iterator: " << result.second << std::endl;
    std::cout << std::endl;
    result = s.insert("A");
    display(s);
    std::cout << std::boolalpha;
    std::cout << "First pair of the iterator: " << *(result.first) << std::endl;
    std::cout << "Second pair of the iterator: " << result.second << std::endl;
}

int main()
{
    test1();
    test2();
    test3();

    return 0;
}
